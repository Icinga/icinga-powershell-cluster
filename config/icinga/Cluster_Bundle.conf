object CheckCommand "Invoke-IcingaCheckClusterHealth" {
    import "PowerShell Base"

    arguments += {
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckClusterHealth_Object_Verbosity$"
            order = 6
        }
        "-Include" = {
            description = "Used to specify an array of nodes to include, allows '*' wildcard"
            value = {{
                var arr = macro("$IcingaCheckClusterHealth_Array_Include$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-SkipClusterRessource" = {
            set_if = "$IcingaCheckClusterHealth_Switchparameter_SkipClusterRessource$"
            order = 99
        }
        "-WarningState" = {
            description = "Allows to specify for which node state the check will throw a warning"
            value = {{
                var arr = macro("$IcingaCheckClusterHealth_Array_WarningState$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 4
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckClusterHealth_Switchparameter_NoPerfData$"
            order = 99
        }
        "-CriticalState" = {
            description = "Allows to specify for which node state the check will throw a critical"
            value = {{
                var arr = macro("$IcingaCheckClusterHealth_Array_CriticalState$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckClusterHealth_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/110-Installation/06-Collect-Metrics-over-Time/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckClusterHealth_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Exclude" = {
            description = "Used to specify an array of nodes to exclude, allows '*' wildcard"
            value = {{
                var arr = macro("$IcingaCheckClusterHealth_Array_Exclude$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
    }
    vars.ifw_api_arguments = {
        "CriticalState" = {
            value = "$IcingaCheckClusterHealth_Array_CriticalState$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckClusterHealth_String_ThresholdInterval$"
        }
        "WarningState" = {
            value = "$IcingaCheckClusterHealth_Array_WarningState$"
        }
        "SkipClusterRessource" = {
            set_if = "$IcingaCheckClusterHealth_Switchparameter_SkipClusterRessource$"
        }
        "Verbosity" = {
            value = "$IcingaCheckClusterHealth_Object_Verbosity$"
        }
        "Exclude" = {
            value = "$IcingaCheckClusterHealth_Array_Exclude$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckClusterHealth_Switchparameter_NoPerfData$"
        }
        "Include" = {
            value = "$IcingaCheckClusterHealth_Array_Include$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckclusterhealth"
    vars.IcingaCheckClusterHealth_Switchparameter_NoPerfData = false
    vars.IcingaCheckClusterHealth_Switchparameter_SkipClusterRessource = false
}

object CheckCommand "Invoke-IcingaCheckClusterSharedVolume" {
    import "PowerShell Base"

    arguments += {
        "-SpaceCritical" = {
            description = "Used to specify a Critical threshold for the SharedVolume, either in % or as byte unit Example: 10% or 10GB"
            value = "$IcingaCheckClusterSharedVolume_Object_SpaceCritical$"
            order = 5
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckClusterSharedVolume_Object_Verbosity$"
            order = 6
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckClusterSharedVolume_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/110-Installation/06-Collect-Metrics-over-Time/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckClusterSharedVolume_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-ExcludeVolumes" = {
            description = "Used to Filter out which Cluster Shared Volumes you don't want to check, provided you have several SharedVolumes on your system. Example ('Cluster disk 2')."
            value = {{
                var arr = macro("$IcingaCheckClusterSharedVolume_Array_ExcludeVolumes$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckClusterSharedVolume_Switchparameter_NoPerfData$"
            order = 99
        }
        "-SpaceWarning" = {
            description = "Used to specify a Warning threshold for the SharedVolume, either in % or as byte unit Example: 10% or 10GB"
            value = "$IcingaCheckClusterSharedVolume_Object_SpaceWarning$"
            order = 4
        }
        "-IncludeVolumes" = {
            description = "Used to Filter out which Cluster Shared Volumes you want to check, provided you have several SharedVolumes on your system. Example ('Cluster disk 2')"
            value = {{
                var arr = macro("$IcingaCheckClusterSharedVolume_Array_IncludeVolumes$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
    }
    vars.ifw_api_arguments = {
        "NoPerfData" = {
            set_if = "$IcingaCheckClusterSharedVolume_Switchparameter_NoPerfData$"
        }
        "ExcludeVolumes" = {
            value = "$IcingaCheckClusterSharedVolume_Array_ExcludeVolumes$"
        }
        "IncludeVolumes" = {
            value = "$IcingaCheckClusterSharedVolume_Array_IncludeVolumes$"
        }
        "SpaceWarning" = {
            value = "$IcingaCheckClusterSharedVolume_Object_SpaceWarning$"
        }
        "Verbosity" = {
            value = "$IcingaCheckClusterSharedVolume_Object_Verbosity$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckClusterSharedVolume_String_ThresholdInterval$"
        }
        "SpaceCritical" = {
            value = "$IcingaCheckClusterSharedVolume_Object_SpaceCritical$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckclustersharedvolume"
    vars.IcingaCheckClusterSharedVolume_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckClusterNetwork" {
    import "PowerShell Base"

    arguments += {
        "-IncludeClusterInterface" = {
            description = "Specify the name of the Network Interfaces you want to include for checks. Example 'Ethernet 1, Ethernet'"
            value = {{
                var arr = macro("$IcingaCheckClusterNetwork_Array_IncludeClusterInterface$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckClusterNetwork_Object_Verbosity$"
            order = 4
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckClusterNetwork_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/110-Installation/06-Collect-Metrics-over-Time/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckClusterNetwork_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-ExcludeClusterInterface" = {
            description = "Specify the name of the Network Interfaces you want to exclude from checks. Example 'Ethernet 1, Ethernet'"
            value = {{
                var arr = macro("$IcingaCheckClusterNetwork_Array_ExcludeClusterInterface$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckClusterNetwork_Switchparameter_NoPerfData$"
            order = 99
        }
    }
    vars.ifw_api_arguments = {
        "Verbosity" = {
            value = "$IcingaCheckClusterNetwork_Object_Verbosity$"
        }
        "IncludeClusterInterface" = {
            value = "$IcingaCheckClusterNetwork_Array_IncludeClusterInterface$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckClusterNetwork_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckClusterNetwork_Switchparameter_NoPerfData$"
        }
        "ExcludeClusterInterface" = {
            value = "$IcingaCheckClusterNetwork_Array_ExcludeClusterInterface$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckclusternetwork"
    vars.IcingaCheckClusterNetwork_Switchparameter_NoPerfData = false
}


