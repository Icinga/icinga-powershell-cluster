object CheckCommand "Invoke-IcingaCheckClusterHealth" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckClusterHealth' "
            order = 0
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckClusterHealth_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state"
            value = "$IcingaCheckClusterHealth_Object_Verbosity$"
            order = 2
        }
    }
    vars.IcingaCheckClusterHealth_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckClusterSharedVolume" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckClusterSharedVolume' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state"
            value = "$IcingaCheckClusterSharedVolume_Object_Verbosity$"
            order = 6
        }
        "-IncludeVolumes" = {
            description = "Used to Filter out which Cluster Shared Volumes you want to check, provided you have several SharedVolumes on your system. Example ('Cluster disk 2')"
            value = {{
                var arr = macro("$IcingaCheckClusterSharedVolume_Array_IncludeVolumes$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 2
        }
        "-FreeSpaceWarning" = {
            description = "Used to specify a Warning threshold for the SharedVolume free space in %. Example (10)"
            value = "$IcingaCheckClusterSharedVolume_Object_FreeSpaceWarning$"
            order = 4
        }
        "-ExcludeVolumes" = {
            description = "Used to Filter out which Cluster Shared Volumes you don't want to check, provided you have several SharedVolumes on your system. Example ('Cluster disk 2')."
            value = {{
                var arr = macro("$IcingaCheckClusterSharedVolume_Array_ExcludeVolumes$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckClusterSharedVolume_Switchparameter_NoPerfData$"
            order = 99
        }
        "-FreeSpaceCritical" = {
            description = "Used to specify a Critical threshold for the SharedVolume free space in %. Example (5)"
            value = "$IcingaCheckClusterSharedVolume_Object_FreeSpaceCritical$"
            order = 5
        }
    }
    vars.IcingaCheckClusterSharedVolume_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckClusterNetwork" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckClusterNetwork' "
            order = 0
        }
        "-IncludeClusterInterface" = {
            description = "Specify the name of the Network Interfaces you want to include for checks. Example 'Ethernet 1, Ethernet'"
            value = {{
                var arr = macro("$IcingaCheckClusterNetwork_Array_IncludeClusterInterface$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 2
        }
        "-ExcludeClusterInterface" = {
            description = "Specify the name of the Network Interfaces you want to exclude from checks. Example 'Ethernet 1, Ethernet'"
            value = {{
                var arr = macro("$IcingaCheckClusterNetwork_Array_ExcludeClusterInterface$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckClusterNetwork_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only services checks/packages with state not OK will be printed. 1: Only services with not OK will be printed including OK checks of affected check packages including Package config. 2: Everything will be printed regardless of the check state."
            value = "$IcingaCheckClusterNetwork_Object_Verbosity$"
            order = 4
        }
    }
    vars.IcingaCheckClusterNetwork_Switchparameter_NoPerfData = false
}


