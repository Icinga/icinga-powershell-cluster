object CheckCommand "Invoke-IcingaCheckClusterNetwork" {
    import "PowerShell Base"

    arguments += {
        "-IncludeClusterInterface" = {
            value = {{
                var arr = macro("$IcingaCheckClusterNetwork_Array_IncludeClusterInterface$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 1
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckClusterNetwork_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckClusterNetwork_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-ExcludeClusterInterface" = {
            value = {{
                var arr = macro("$IcingaCheckClusterNetwork_Array_ExcludeClusterInterface$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-NoPerfData" = {
            value = "$IcingaCheckClusterNetwork_Switch_NoPerfData$"
            order = 99
        }
        "-Verbosity" = {
            value = "$IcingaCheckClusterNetwork_Object_Verbosity$"
            order = 3
        }
    }
    vars.ifw_api_arguments = {
        "Verbosity" = {
            value = "$IcingaCheckClusterNetwork_Object_Verbosity$"
        }
        "IncludeClusterInterface" = {
            value = "$IcingaCheckClusterNetwork_Array_IncludeClusterInterface$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckClusterNetwork_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            value = "$IcingaCheckClusterNetwork_Switch_NoPerfData$"
        }
        "ExcludeClusterInterface" = {
            value = "$IcingaCheckClusterNetwork_Array_ExcludeClusterInterface$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckclusternetwork"
}
